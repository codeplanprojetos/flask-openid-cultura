#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import json

from configparser import ConfigParser
from os import path, environ, getcwd

# Carrega configuração.
if path.exists('./config/env.cfg'):
    config = ConfigParser()
    config.read('./config/env.cfg')

    for key in config['env']:
        environ[key.upper()] = config['env'][key]
else:
        raise UndefinedHome()

# Carregar ambiente virtual
activate_this = path.join(getcwd(), 'venv/bin/activate_this.py')
with open(activate_this) as file_:
    exec(file_.read(), dict(__file__ = activate_this))

# Apaga base se executar da linha de comando.
if __name__ == '__main__':
    import click
    @click.command()
    @click.argument('provider') #, help = 'Especifica a URL do provedor de identificação.')
    @click.option('--stdout', is_flag = True, help = 'Apenas imprime resultado na saída padrão.')
    @click.argument('outfile', default = 'client_secrets.json')
    def register(provider, stdout, outfile):
        """Registra cliente junto ao PROVIDER e grava no arquivo OUTFILE. PROVIDER é
        a URL padrão do provedor de identificação (ex: https://id.cultura.org.br).
        OUTFILE é o arquivo que armazenará os dados do cliente e por padrão se chama
        client_secrets.json."""
        from flask_oidc import discovery, registration
        from ambiente import uri, redirect_uri
        click.echo('O endereço atual do cliente OpenID é ' + uri + "\n")

        try:
            click.confirm("Tem certeza que deseja registrar o cliente com este endereço? " +
                          "Não será possível registrar o mesmo endereço de novo", abort = True)
        except:
            click.echo('Cancelado')
            return

        provider_info = discovery.discover_OP_information(provider)
        result = json.dumps(registration.register_client(provider_info, [redirect_uri]))

        if stdout:
            print(result)
        else:
            with open(outfile, 'w') as output:
                click.echo('Arquivo %s escrito.', outfile)
                output.write(result)

    @click.command()
    def server():
        """Executa como servidor HTTP em modo DEBUG."""
        click.echo('Iniciando servidor HTTP localmente em modo DEBUG...')
        from app import create_app
        app = create_app()
        app.run(debug = True)

    @click.group(add_help_option = False)
    def run():
        """Especifique --help depois de cada comando para ver os detalhes específicos de cada."""
        pass

    run.add_command(register)
    run.add_command(server)
    run()

else:
    from app import create_app
    from armazenamento import Storage
    application = create_app(Storage())

